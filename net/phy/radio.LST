C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE RADIO
OBJECT MODULE PLACED IN radio.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe radio.c DB OE BR SMALL OPTIMIZE(11,SIZE) DEFINE(SILABS_PLATFORM_WMB912) DEF
                    -INE(SILABS_WMCU_SI106x) INCDIR(D:\usr\SiLabs\MCU\Inc;D:\usr\cygwin64\home\ticheng\my_repos\robin\inc)

line level    source

   1          /*! @file radio.c
   2           * @brief This file contains functions to interface with the radio chip.
   3           *
   4           * @b COPYRIGHT
   5           * @n Silicon Laboratories Confidential
   6           * @n Copyright 2012 Silicon Laboratories, Inc.
   7           * @n http://www.silabs.com
   8           */
   9          
  10          #include "bsp.h"
  11          
  12          #if !(defined SILABS_PLATFORM_WMB912)
              #define ERROR_HOOK while (TRUE) \
                  { \
                for (rollingCounter = 0u; \
                rollingCounter < 0xFFFF; \
                rollingCounter++)  ; \
              }
              #else
  20          #define ERROR_HOOK while (TRUE) \
  21              { \
  22            for (rollingCounter = 0u; \
  23            rollingCounter < 0xFFFF; \
  24            rollingCounter++)  ; \
  25          }
  26          #endif
  27          /*****************************************************************************
  28           *  Local Macros & Definitions
  29           *****************************************************************************/
  30          SEGMENT_VARIABLE(bPositionInPayload, U8, SEG_XDATA) = 0u;
  31          
  32          SEGMENT_VARIABLE(bNumOfRestBytes, U8, SEG_XDATA) = 0u;
  33          
  34          const  U8* pPositionInPayload_t;
  35          
  36          SEGMENT_VARIABLE(rollingCounter, U16, SEG_XDATA);
  37          
  38          SEGMENT_VARIABLE(bNumOfFreeBytes, U16, SEG_XDATA) = RADIO_MAX_LONG_PACKET_LENGTH;
  39          
  40          U8* pPositionInPayload_r =  &fixRadioPacket[0u];
  41          
  42          /*****************************************************************************
  43           *  Global Variables
  44           *****************************************************************************/
  45          const SEGMENT_VARIABLE(Radio_Configuration_Data_Array[], U8, SEG_CODE) = \
  46                        RADIO_CONFIGURATION_DATA_ARRAY;
  47          
  48          const SEGMENT_VARIABLE(Radio_Configuration_Data_Custom_Long_Payload_Array[], U8, SEG_CODE) = \
  49                        RADIO_CONFIGURATION_DATA_CUSTOM_LONG_PAYLOAD;
  50          
  51          const SEGMENT_VARIABLE(RadioConfiguration, tRadioConfiguration, SEG_CODE) = \
  52                                  RADIO_CONFIGURATION_DATA;
  53          
  54          const SEGMENT_VARIABLE_SEGMENT_POINTER(pRadioConfiguration, tRadioConfiguration, SEG_CODE, SEG_CODE) = \
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 2   

  55                                  &RadioConfiguration;
  56          
  57          SEGMENT_VARIABLE(fixRadioPacket[RADIO_MAX_LONG_PACKET_LENGTH], U8, SEG_XDATA);
  58          
  59          /*****************************************************************************
  60           *  Local Function Declarations
  61           *****************************************************************************/
  62          void vRadio_PowerUp(void);
  63          
  64          /*!
  65           *  Power up the Radio.
  66           *
  67           *  @note
  68           *
  69           */
  70          void vRadio_PowerUp(void)
  71          {
  72   1        SEGMENT_VARIABLE(wDelay,  U16, SEG_XDATA) = 0u;
  73   1      
  74   1        /* Hardware reset the chip */
  75   1        si446x_reset();
  76   1      
  77   1        /* Wait until reset timeout or Reset IT signal */
  78   1        for (; wDelay < pRadioConfiguration->Radio_Delay_Cnt_After_Reset; wDelay++);
  79   1      }
  80          
  81          /*!
  82           *  Radio Initialization.
  83           *
  84           *  @author Sz. Papp
  85           *
  86           *  @note
  87           *
  88           */
  89          void vRadio_Init(void)
  90          {
  91   1        U16 wDelay;
  92   1      
  93   1        /* Power Up the radio chip */
  94   1        vRadio_PowerUp();
  95   1      
  96   1        /* Load radio configuration */
  97   1        while (SI446X_SUCCESS != si446x_configuration_init(pRadioConfiguration->Radio_ConfigurationArray))
  98   1        {
  99   2      
 100   2          for (wDelay = 0x7FFF; wDelay--; ) ;
 101   2      
 102   2          /* Power Up the radio chip */
 103   2          vRadio_PowerUp();
 104   2        }
 105   1      
 106   1        // Read ITs, clear pending ones
 107   1        si446x_get_int_status(0u, 0u, 0u);
 108   1      }
 109          
 110          /*!
 111           *  Check if Packet sent IT flag is pending.
 112           *
 113           *  @return   TRUE / FALSE
 114           *
 115           *  @note
 116           *
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 3   

 117           */
 118          BIT gRadio_CheckTransmitted(void)
 119          {
 120   1        if (RF_NIRQ == FALSE)
 121   1        {
 122   2          /* Read ITs, clear pending ones */
 123   2          si446x_get_int_status(0u, 0u, 0u);
 124   2      
 125   2          /* check the reason for the IT */
 126   2          if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PACKET_SENT_PEND_BIT)
 127   2          {
 128   3            /* Nothing is sent to TX FIFO */
 129   3            bPositionInPayload = 0u;
 130   3      
 131   3            /* Position to the very beginning of the custom long payload */
 132   3           // pPositionInPayload_t = (U8*) &pRadioConfiguration->Radio_Custom_Long_Payload;
 133   3      
 134   3            return TRUE;
 135   3          }
 136   2      
 137   2          if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_TX_FIFO_ALMOST_EMPTY_PEND_BIT)
 138   2          {
 139   3              /* Calculate the number of remaining bytes has to be sent to TX FIFO */
 140   3              bNumOfRestBytes = RadioConfiguration.Radio_PacketLength - bPositionInPayload;
 141   3      
 142   3              if(bNumOfRestBytes > RADIO_TX_ALMOST_EMPTY_THRESHOLD)
 143   3              { // remaining byte more than threshold
 144   4      
 145   4                /* Fill TX FIFO with the number of THRESHOLD bytes */
 146   4                si446x_write_tx_fifo(RADIO_TX_ALMOST_EMPTY_THRESHOLD, pPositionInPayload_t);
 147   4      
 148   4                /* Calculate how many bytes are sent to TX FIFO */
 149   4                bPositionInPayload += RADIO_TX_ALMOST_EMPTY_THRESHOLD;
 150   4      
 151   4                /* Position to the next first byte that can be sent to TX FIFO in next round */
 152   4                pPositionInPayload_t += RADIO_TX_ALMOST_EMPTY_THRESHOLD;
 153   4      
 154   4              }
 155   3              else if(bNumOfRestBytes != 0)
 156   3              { // remaining byte less or equal than threshold
 157   4      
 158   4               /* Fill TX FIFO with the number of rest bytes */
 159   4                si446x_write_tx_fifo(bNumOfRestBytes, pPositionInPayload_t);
 160   4      
 161   4                /* Calculate how many bytes are sent to TX FIFO */
 162   4                bPositionInPayload += bNumOfRestBytes;
 163   4      
 164   4                /* Position to the next first byte that can be sent to TX FIFO in next round */
 165   4                pPositionInPayload_t += bNumOfRestBytes;
 166   4              }
 167   3          }
 168   2        }
 169   1      
 170   1        return FALSE;
 171   1      }
 172          
 173          /*BIT handle_CheckReceive()
 174          {
 175                  switch(gRadio_CheckReceived())
 176                  {
 177                          case SI446X_CMD_GET_INT_STATUS_REP_PACKET_RX_PEND_BIT:
 178                                  return TRUE;
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 4   

 179          
 180                          case SI446X_CMD_GET_INT_STATUS_REP_RX_FIFO_ALMOST_FULL_BIT:
 181          
 182                          break;
 183                  }
 184          }*/
 185          /*!
 186           *  Check if Packet received IT flag is pending.
 187           *
 188           *  @return   TRUE - Packet successfully received / FALSE - No packet pending.
 189           *
 190           *  @note
 191           *
 192           */
 193          BIT gRadio_CheckReceived(void)
 194          {
 195   1        if (RF_NIRQ == FALSE)
 196   1        {
 197   2          /* Read ITs, clear pending ones */
 198   2          si446x_get_int_status(0u, 0u, 0u);
 199   2      
 200   2          /* check the reason for the IT */
 201   2          // if (Si446xCmd.GET_INT_STATUS.MODEM_PEND & SI446X_CMD_GET_INT_STATUS_REP_SYNC_DETECT_BIT)
 202   2           //{
 203   2             /* Blink once LED2 to show Sync Word detected */
 204   2      //       vHmi_ChangeLedState(eHmi_Led2_c, eHmi_LedBlinkOnce_c);
 205   2           //}
 206   2      
 207   2          if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PACKET_RX_PEND_BIT)
 208   2          {
 209   3            /* Blink once LED3 as CRC OK or not enabled */
 210   3      //      vHmi_ChangeLedState(eHmi_Led3_c, eHmi_LedBlinkOnce_c);
 211   3      
 212   3            /* Calculate the number of free bytes in the array */
 213   3            bNumOfFreeBytes = RADIO_MAX_LONG_PACKET_LENGTH - bPositionInPayload;
 214   3      
 215   3            if (bNumOfFreeBytes >= RADIO_MAX_PACKET_LENGTH)
 216   3            {// free space in buffer more than RX FIFO size
 217   4      
 218   4              /* Read the RX FIFO with the number of RX FIFO size */
 219   4              si446x_read_rx_fifo(RADIO_MAX_PACKET_LENGTH, pPositionInPayload_r);
 220   4      
 221   4              /* Calculate how many bytes are already stored in the array */
 222   4              bPositionInPayload += RADIO_MAX_PACKET_LENGTH;
 223   4      
 224   4              /* Position to the next free byte that can be written in the next RX FIFO reading */
 225   4              pPositionInPayload_r += RADIO_MAX_PACKET_LENGTH;
 226   4            }
 227   3            else
 228   3            {
 229   4              /* Read the RX FIFO with the number of free bytes */
 230   4              si446x_read_rx_fifo(bNumOfFreeBytes, pPositionInPayload_r);
 231   4      
 232   4              /* Calculate how many bytes are already stored in the array */
 233   4              bPositionInPayload += bNumOfFreeBytes;
 234   4      
 235   4              /* Position to the next free byte that can be written in the next RX FIFO reading */
 236   4              pPositionInPayload_r += bNumOfFreeBytes;
 237   4      
 238   4            }
 239   3      
 240   3            /* Calculate how many bytes are already stored in the array */
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 5   

 241   3             bPositionInPayload = 0u;
 242   3      
 243   3             /* Set writing pointer to the beginning of the array */
 244   3             pPositionInPayload_r = &fixRadioPacket[0u];
 245   3      
 246   3             /* free space */
 247   3             bNumOfFreeBytes = RADIO_MAX_LONG_PACKET_LENGTH;
 248   3      
 249   3             /* Start the radio */
 250   3             vRadio_StartRX(pRadioConfiguration->Radio_ChannelNumber);
 251   3      
 252   3      #ifdef UART_LOGGING_SUPPORT
                    {
                        U8 lCnt;
                        
                        /* Send it to UART */
                        for (lCnt = 0u; lCnt < RadioConfiguration.Radio_PacketLength; lCnt++)
                        {
                          Comm_IF_SendUART(*((U8 *) &fixRadioPacket[0u] + lCnt));
                        }
                        Comm_IF_SendUART('\n');
                    }
              #endif
 264   3      
 265   3            return TRUE;
 266   3          }
 267   2      
 268   2          if(Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_RX_FIFO_ALMOST_FULL_BIT)
 269   2          {
 270   3            /* Calculate the number of free bytes in the array */
 271   3            bNumOfFreeBytes = RADIO_MAX_LONG_PACKET_LENGTH - bPositionInPayload;
 272   3      
 273   3            if (bNumOfFreeBytes >= RADIO_RX_ALMOST_FULL_THRESHOLD)
 274   3            { // free space in the array is more than the threshold
 275   4      
 276   4              /* Read the RX FIFO with the number of THRESHOLD bytes */
 277   4              si446x_read_rx_fifo(RADIO_RX_ALMOST_FULL_THRESHOLD, pPositionInPayload_r);
 278   4      
 279   4              /* Calculate how many bytes are already stored in the array */
 280   4              bPositionInPayload += RADIO_RX_ALMOST_FULL_THRESHOLD;
 281   4      
 282   4              /* Position to the next free byte that can be written in the next RX FIFO reading */
 283   4              pPositionInPayload_r += RADIO_RX_ALMOST_FULL_THRESHOLD;
 284   4      
 285   4                      //return SI446X_CMD_GET_INT_STATUS_REP_RX_FIFO_ALMOST_FULL_BIT;
 286   4            }
 287   3            //else
 288   3            //{
 289   3              /* Not enough free space reserved in the program */
 290   3              //ERROR_HOOK;
 291   3                      //return FALSE;
 292   3      //      }
 293   3          }
 294   2      
 295   2      
 296   2          if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_CRC_ERROR_BIT)
 297   2          {
 298   3            /* Reset FIFO */
 299   3            si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_RX_BIT);
 300   3                return FALSE;
 301   3          }
 302   2        }
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 6   

 303   1      
 304   1        return FALSE;
 305   1      }
 306          
 307          /*!
 308           *  Set Radio to RX mode, fixed packet length.
 309           *
 310           *  @param channel Freq. Channel
 311           *
 312           *  @note
 313           *
 314           */
 315          void vRadio_StartRX(U8 channel)
 316          {
 317   1        // Read ITs, clear pending ones
 318   1        si446x_get_int_status(0u, 0u, 0u);
 319   1      
 320   1        /* Reset FIFO */
 321   1        si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_RX_BIT);
 322   1      
 323   1        /* Start Receiving packet, channel 0, START immediately, Packet length according to PH */
 324   1        si446x_start_rx(channel, 0u, RadioConfiguration.Radio_PacketLength,
 325   1                        SI446X_CMD_START_RX_ARG_RXTIMEOUT_STATE_ENUM_NOCHANGE,
 326   1                        SI446X_CMD_START_RX_ARG_RXVALID_STATE_ENUM_READY,
 327   1                        SI446X_CMD_START_RX_ARG_RXINVALID_STATE_ENUM_RX );
 328   1      
 329   1        /* Switch on LED1 to show RX state */
 330   1      //  vHmi_ChangeLedState(eHmi_Led1_c, eHmi_LedOn_c);
 331   1      }
 332          
 333          
 334          /*!
 335           *  Set Radio to TX mode, fixed packet length.
 336           *
 337           *  @param channel Freq. Channel, Packet to be sent
 338           *
 339           *  @note
 340           *
 341           */
 342          void  vRadio_StartTx(U8 channel, U8 *pioFixRadioPacket)
 343          {
 344   1        /* Leave RX state */
 345   1        si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEW_STATE_ENUM_READY);
 346   1      
 347   1        /* Reset TX FIFO */
 348   1        si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_TX_BIT);
 349   1      
 350   1        // Read ITs, clear pending ones
 351   1        si446x_get_int_status(0u, 0u, 0u);
 352   1      
 353   1        /* Position to the very beginning of the custom long payload */
 354   1        pPositionInPayload_t = pioFixRadioPacket;
 355   1      
 356   1        /* Fill the TX fifo with datas */
 357   1        if( RADIO_MAX_PACKET_LENGTH < RadioConfiguration.Radio_PacketLength)
 358   1        {
 359   2          /* Data to be sent is more than the size of TX FIFO */
 360   2          si446x_write_tx_fifo(RADIO_MAX_PACKET_LENGTH, pPositionInPayload_t);
 361   2      
 362   2          /* Calculate how many bytes are sent to TX FIFO */
 363   2          bPositionInPayload += RADIO_MAX_PACKET_LENGTH;
 364   2      
C51 COMPILER V9.51   RADIO                                                                 04/26/2015 18:55:47 PAGE 7   

 365   2          /* Position to the next first byte that can be sent to TX FIFO in next round */
 366   2          pPositionInPayload_t += RADIO_MAX_PACKET_LENGTH;
 367   2        }
 368   1        else
 369   1        {
 370   2          /* Calculate how many bytes are sent to TX FIFO */
 371   2          bPositionInPayload += RadioConfiguration.Radio_PacketLength;
 372   2      
 373   2          // Data to be sent is less or equal than the size of TX FIFO
 374   2          si446x_write_tx_fifo(RadioConfiguration.Radio_PacketLength, pioFixRadioPacket);
 375   2        }
 376   1      
 377   1      
 378   1        /* Start sending packet, channel 0, START immediately, Packet length according to PH, go READY when done
             - */
 379   1        si446x_start_tx(channel, 0x80,  0);
 380   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    558    ----
   CONSTANT SIZE    =    550    ----
   XDATA SIZE       =    198       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
