C51 COMPILER V9.51   RADIO_COMM                                                            04/26/2015 18:55:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE RADIO_COMM
OBJECT MODULE PLACED IN radio_comm.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe radio_comm.c DB OE BR SMALL OPTIMIZE(11,SIZE) DEFINE(SILABS_PLATFORM_WMB912
                    -) DEFINE(SILABS_WMCU_SI106x) INCDIR(D:\usr\SiLabs\MCU\Inc;D:\usr\cygwin64\home\ticheng\my_repos\robin\inc)

line level    source

   1          /*!
   2           * File:
   3           *  radio_comm.h
   4           *
   5           * Description:
   6           *  This file contains the RADIO communication layer.
   7           *
   8           * Silicon Laboratories Confidential
   9           * Copyright 2012 Silicon Laboratories, Inc.
  10           */
  11          
  12                          /* ======================================= *
  13                           *              I N C L U D E              *
  14                           * ======================================= */
  15          
  16          #include "bsp.h"
  17          
  18                          /* ======================================= *
  19                           *          D E F I N I T I O N S          *
  20                           * ======================================= */
  21          
  22                          /* ======================================= *
  23                           *     G L O B A L   V A R I A B L E S     *
  24                           * ======================================= */
  25          
  26          #if (defined SILABS_RADIO_SI446X) || (defined SILABS_RADIO_SI4455)
  27          BIT ctsWentHigh = 0;
  28          #endif
  29          
  30          
  31                          /* ======================================= *
  32                           *      L O C A L   F U N C T I O N S      *
  33                           * ======================================= */
  34          
  35                          /* ======================================= *
  36                           *     P U B L I C   F U N C T I O N S     *
  37                           * ======================================= */
  38          
  39          #if (defined SILABS_RADIO_SI446X) || (defined SILABS_RADIO_SI4455)
  40          
  41          /*!
  42           * Gets a command response from the radio chip
  43           *
  44           * @param byteCount     Number of bytes to get from the radio chip
  45           * @param pData         Pointer to where to put the data
  46           *
  47           * @return CTS value
  48           */
  49          U8 radio_comm_GetResp(U8 byteCount, U8* pData)
  50          {
  51   1        SEGMENT_VARIABLE(ctsVal = 0u, U8, SEG_DATA);
  52   1        SEGMENT_VARIABLE(errCnt = RADIO_CTS_TIMEOUT, U16, SEG_DATA);
  53   1      
  54   1        while (errCnt != 0)      //wait until radio IC is ready with the data
C51 COMPILER V9.51   RADIO_COMM                                                            04/26/2015 18:55:45 PAGE 2   

  55   1        {
  56   2          radio_hal_ClearNsel();
  57   2          radio_hal_SpiWriteByte(0x44);    //read CMD buffer
  58   2          ctsVal = radio_hal_SpiReadByte();
  59   2          if (ctsVal == 0xFF)
  60   2          {
  61   3            if (byteCount)
  62   3            {
  63   4              radio_hal_SpiReadData(byteCount, pData);
  64   4            }
  65   3            radio_hal_SetNsel();
  66   3            break;
  67   3          }
  68   2          radio_hal_SetNsel();
  69   2          errCnt--;
  70   2        }
  71   1      
  72   1        if (errCnt == 0)
  73   1        {
  74   2          while(1)
  75   2          {
  76   3            /* ERROR!!!!  CTS should never take this long. */
  77   3            #ifdef RADIO_COMM_ERROR_CALLBACK
                      RADIO_COMM_ERROR_CALLBACK();
                    #endif
  80   3          }
  81   2        }
  82   1      
  83   1        if (ctsVal == 0xFF)
  84   1        {
  85   2          ctsWentHigh = 1;
  86   2        }
  87   1      
  88   1        return ctsVal;
  89   1      }
  90          
  91          /*!
  92           * Sends a command to the radio chip
  93           *
  94           * @param byteCount     Number of bytes in the command to send to the radio device
  95           * @param pData         Pointer to the command to send.
  96           */
  97          void radio_comm_SendCmd(U8 byteCount, U8* pData)
  98          {
  99   1          /* There was a bug in A1 hardware that will not handle 1 byte commands. 
 100   1             It was supposedly fixed in B0 but the fix didn't make it at the last minute, so here we go again */
 101   1          if (byteCount == 1)
 102   1              byteCount++;
 103   1      
 104   1          while (!ctsWentHigh)
 105   1          {
 106   2              radio_comm_PollCTS();
 107   2          }
 108   1          radio_hal_ClearNsel();
 109   1          radio_hal_SpiWriteData(byteCount, pData);
 110   1          radio_hal_SetNsel();
 111   1          ctsWentHigh = 0;
 112   1      }
 113          
 114          /*!
 115           * Gets a command response from the radio chip
 116           *
C51 COMPILER V9.51   RADIO_COMM                                                            04/26/2015 18:55:45 PAGE 3   

 117           * @param cmd           Command ID
 118           * @param pollCts       Set to poll CTS
 119           * @param byteCount     Number of bytes to get from the radio chip.
 120           * @param pData         Pointer to where to put the data.
 121           */
 122          void radio_comm_ReadData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
 123          {
 124   1          if(pollCts)
 125   1          {
 126   2              while(!ctsWentHigh)
 127   2              {
 128   3                  radio_comm_PollCTS();
 129   3              }
 130   2          }
 131   1          radio_hal_ClearNsel();
 132   1          radio_hal_SpiWriteByte(cmd);
 133   1          radio_hal_SpiReadData(byteCount, pData);
 134   1          radio_hal_SetNsel();
 135   1          ctsWentHigh = 0;
 136   1      }
 137          
 138          
 139          /*!
 140           * Gets a command response from the radio chip
 141           *
 142           * @param cmd           Command ID
 143           * @param pollCts       Set to poll CTS
 144           * @param byteCount     Number of bytes to get from the radio chip
 145           * @param pData         Pointer to where to put the data
 146           */
 147          void radio_comm_WriteData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
 148          {
 149   1          if(pollCts)
 150   1          {
 151   2              while(!ctsWentHigh)
 152   2              {
 153   3                  radio_comm_PollCTS();
 154   3              }
 155   2          }
 156   1          radio_hal_ClearNsel();
 157   1          radio_hal_SpiWriteByte(cmd);
 158   1          radio_hal_SpiWriteData(byteCount, pData);
 159   1          radio_hal_SetNsel();
 160   1          ctsWentHigh = 0;
 161   1      }
 162          
 163          /*!
 164           * Waits for CTS to be high
 165           *
 166           * @return CTS value
 167           */
 168          U8 radio_comm_PollCTS(void)
 169          {
 170   1      #ifdef RADIO_USER_CFG_USE_GPIO1_FOR_CTS
                  while(!radio_hal_Gpio1Level())
                  {
                      /* Wait...*/
                  }
                  ctsWentHigh = 1;
                  return 0xFF;
              #else
 178   1          return radio_comm_GetResp(0, 0);
C51 COMPILER V9.51   RADIO_COMM                                                            04/26/2015 18:55:45 PAGE 4   

 179   1      #endif
 180   1      }
 181          
 182          /**
 183           * Clears the CTS state variable.
 184           */
 185          void radio_comm_ClearCTS()
 186          {
 187   1        ctsWentHigh = 0;
 188   1      }
 189          
 190          #elif (defined SILABS_RADIO_SI4012)
              
              /*!
               * Gets a command response from the radio chip
               *
               * @param byteCount     Number of bytes to get from the radio chip
               * @param pData         Pointer to where to put the data
               *
               * @return CTS value
               */
              U8 radio_comm_GetResp(U8 byteCount, U8* pData)
              {
                SEGMENT_VARIABLE(ctsVal = 0u, U8, SEG_DATA);
              
                if (qSmbus_SMBusRead(SI4012_SMBUS_ADDRESS, byteCount, pData) != \
                                                                        SMBUS_RX_FINISHED) {
                  return FALSE;
                }
              
                if (pData[0] == 0x80) {
                  return TRUE;
                }
              
                return FALSE;
              }
              
              /*!
               * Sends a command to the radio chip
               *
               * @param byteCount     Number of bytes in the command to send to the radio device
               * @param pData         Pointer to the command to send.
               */
              U8 radio_comm_SendCmd(U8 byteCount, U8* pData)
              {
                if (qSmbus_SMBusWrite(SI4012_SMBUS_ADDRESS, byteCount, pData) != \
                                                                    SMBUS_TRANSMISSION_OK) {
                  return FALSE;
                }
              
                return TRUE;
              }
              
              #endif
 233          
 234          /*!
 235           * Sends a command to the radio chip and gets a response
 236           *
 237           * @param cmdByteCount  Number of bytes in the command to send to the radio device
 238           * @param pCmdData      Pointer to the command data
 239           * @param respByteCount Number of bytes in the response to fetch
 240           * @param pRespData     Pointer to where to put the response data
C51 COMPILER V9.51   RADIO_COMM                                                            04/26/2015 18:55:45 PAGE 5   

 241           *
 242           * @return CTS value
 243           */
 244          U8 radio_comm_SendCmdGetResp(U8 cmdByteCount, U8* pCmdData, U8 respByteCount, U8* pRespData)
 245          {
 246   1          radio_comm_SendCmd(cmdByteCount, pCmdData);
 247   1          return radio_comm_GetResp(respByteCount, pRespData);
 248   1      }
 249          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    238    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
