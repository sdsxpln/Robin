C51 COMPILER V9.51   TIMER                                                                 04/26/2015 18:55:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe timer.c DB OE BR SMALL OPTIMIZE(11,SIZE) DEFINE(SILABS_PLATFORM_WMB912) DEF
                    -INE(SILABS_WMCU_SI106x) INCDIR(D:\usr\SiLabs\MCU\Inc;D:\usr\cygwin64\home\ticheng\my_repos\robin\inc)

line level    source

   1          /*! @file timer.c
   2           * @brief This file contains the interface functions of the timers.
   3           *
   4           * @b COPYRIGHT
   5           * @n Silicon Laboratories Confidential
   6           * @n Copyright 2012 Silicon Laboratories, Inc.
   7           * @n http://www.silabs.com
   8           */
   9          
  10          #include "bsp.h"
  11          
  12          /*------------------------------------------------------------------------*/
  13          /*                          Global variables                              */
  14          /*------------------------------------------------------------------------*/
  15          
  16          SEGMENT_VARIABLE(wwTmr_Tmr2Periode , UU16, SEG_DATA) = {lTmr_Tmr2CntMax_c}; /**< Timer 2 period (1ms) */
  17          
  18          
  19          /*------------------------------------------------------------------------*/
  20          /*                          Function implementations                      */
  21          /*------------------------------------------------------------------------*/
  22          
  23          /*!
  24           * This function is used to start Timer 2 in the specified mode.
  25           *
  26           * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr2One_c, bTmr_Tmr2Bot
             -h_c)
  27           * @param[in] wwiPeriod   The duration of the timing
  28           * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
  29           * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
  30           *
  31           * @return  None.
  32           */
  33          void vTmr_StartTmr2(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel)
  34          {
  35   1      
  36   1        //setup timer
  37   1        if (biPrescaler == eTmr_SysClk_c)
  38   1        {
  39   2          CKCON |= (M_T2MH | M_T2ML);
  40   2        }
  41   1        else
  42   1        {
  43   2          CKCON &= ~(M_T2MH | M_T2ML);
  44   2        }
  45   1        TMR2CN = biExtClkSel & M_T2XCLK;
  46   1      
  47   1        //set time period
  48   1        wiPeriod = 65535u - wiPeriod;
  49   1        TMR2 = wiPeriod;
  50   1        TMR2RL = wiPeriod;
  51   1      
  52   1        //enable IT if needed
  53   1        if (biItEnable)
C51 COMPILER V9.51   TIMER                                                                 04/26/2015 18:55:46 PAGE 2   

  54   1        {
  55   2          mTmr_EnableTmr2It();
  56   2        }
  57   1        else
  58   1        {
  59   2          mTmr_DisableTmr2It();
  60   2        }
  61   1        mTmr_EnableTmr2();
  62   1      }
  63          
  64          #ifdef TIMER_DRIVER_EXTENDED_SUPPORT
  65          
  66          /*!
  67           * This function is used to check if Timer 2 is expired.
  68           *
  69           * @return  True if timer is expired (also stops the timer).
  70           * @note Function clears the IT status flag as well.
  71           */
  72          BIT gTmr_Tmr2Expired(void)
  73          {
  74   1        if( TF2H == 0)
  75   1        {
  76   2          return FALSE;
  77   2        }
  78   1        else
  79   1        {
  80   2          mTmr_StopTmr2();
  81   2          return TRUE;
  82   2        }
  83   1      
  84   1      }
  85          
  86          /*!
  87           * This function is used to start Timer 3 in the specified mode.
  88           *
  89           * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr3One_c, bTmr_Tmr3Bot
             -h_c)
  90           * @param[in] wiPeriod    The duration of the timing
  91           * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
  92           * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
  93           *
  94           * @return  None.
  95           */
  96          void vTmr_StartTmr3(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel)
  97          {
  98   1      
  99   1      #ifdef SILABS_MCU_F960
                SEGMENT_VARIABLE(bRestoreSfrPage, U8, SEG_DATA);
              
                bRestoreSfrPage = SFRPAGE;
                SFRPAGE = LEGACY_PAGE;
              #endif //#ifdef SILABS_MCU_F960
 105   1      
 106   1        /* Configure the timer3 operation */
 107   1        vTmr_StartTmr3_phaseConfigure(biPrescaler, wiPeriod, biItEnable, biExtClkSel, FALSE );
 108   1      
 109   1        vTmr_StartTmr3_phaseStart(wiPeriod);
 110   1      
 111   1      #ifdef SILABS_MCU_F960
                // Restore SFR page after SPI transfer
                SFRPAGE = bRestoreSfrPage;
              #endif //#ifdef SILABS_MCU_F960
C51 COMPILER V9.51   TIMER                                                                 04/26/2015 18:55:46 PAGE 3   

 115   1      }
 116          
 117          
 118          /*!
 119           * This function is used to configure Timer 3 in the specified mode without starting it.
 120           *
 121           * @param[in] biPrescaler Prescaler value of timer (use predefined constants: bTmr_Tmr3One_c, bTmr_Tmr3Bot
             -h_c)
 122           * @param[in] wiPeriod    The duration of the timing
 123           * @param[in] biItEnable  Enables timer IT if TRUE, disables it if FALSE
 124           * @param[in] biExtClkSel External clock select (use predefined constants: bTmr_TxXCLK_00_c etc.)
 125           * @param[in] biSetItPriorityHigh If TRUE sets the Timer3 IT priority to High
 126           *
 127           * @return  None.
 128           */
 129          void vTmr_StartTmr3_phaseConfigure(U8 biPrescaler, U16 wiPeriod, U8 biItEnable, U8 biExtClkSel, U8 biSetIt
             -PriorityHigh)
 130          {
 131   1      
 132   1        if (biPrescaler == eTmr_SysClk_c)
 133   1        {
 134   2          CKCON |= (M_T3MH | M_T3ML);
 135   2        }
 136   1        else
 137   1        {
 138   2          CKCON &= ~(M_T3MH | M_T3ML);
 139   2        }
 140   1      
 141   1      #if 0 //TODO: Left here for debug purposes, remove if released
                /* Set T3 to run from SYSCLK */
                CKCON &= 0x3F;
                CKCON |= 0x40;
              #endif
 146   1      
 147   1        TMR3CN = biExtClkSel & M_T3XCLK;
 148   1      
 149   1      #if 0 //TODO: Left here for debug purposes, remove if released
                /* Reset Timer3 flags, Stop mode, AutoReload */
                TMR3CN = 0u;
              #endif
 153   1      
 154   1      
 155   1        wiPeriod = 65535u - wiPeriod;
 156   1        TMR3 = wiPeriod;
 157   1        TMR3RL = wiPeriod;
 158   1      
 159   1      #if 0 //TODO: Left here for debug purposes, remove if released
                /* Set Initial Value */
                TMR3 = Reload;
              
                /* Set Reload value */
                TMR3RL = Reload;
              #endif
 166   1      
 167   1        if ( biSetItPriorityHigh )
 168   1        {
 169   2          /* Set Timer3 IT priority to High */
 170   2          EIP1 |= 0x80;
 171   2        }
 172   1      
 173   1        //enable IT if needed
 174   1        if( biItEnable == 1 )
C51 COMPILER V9.51   TIMER                                                                 04/26/2015 18:55:46 PAGE 4   

 175   1        {
 176   2          mTmr_EnableTmr3It();
 177   2        }
 178   1        else
 179   1        {
 180   2          mTmr_DisableTmr3It();
 181   2        }
 182   1      
 183   1      #if 0 //TODO: Left here for debug purposes, remove if released
                /* Enable Timer3 IT */
                EIE1 |= 0x80;
              #endif
 187   1      
 188   1      }
 189          
 190          
 191          /**
 192           *  Starts Timer3 HW peripheral
 193           *
 194           *  @param Reload Timer Reload Value
 195           *
 196           *  @author Sz. Papp
 197           *
 198           *  @note
 199           *
 200           *****************************************************************************/
 201          void vTmr_StartTmr3_phaseStart(U16 wiPeriod)
 202          {
 203   1        /* Set Reload value */
 204   1        wiPeriod = 65535u - wiPeriod;
 205   1        TMR3RL = wiPeriod;
 206   1      
 207   1        mTmr_EnableTmr3();
 208   1      
 209   1      #if 0 //TODO: Left here for debug purposes, remove if released
                /* Start Timer3 */
                TMR3CN |= 0x04;
              #endif
 213   1      }
 214          
 215          
 216          
 217          /*!
 218           * This function is used to check if Timer 3 is expired.
 219           *
 220           * @return  True if timer is expired (also stops the timer).
 221           * @note Function clears the IT status flag as well.
 222           */
 223          
 224          BIT gTmr_Tmr3Expired(void)
 225          {
 226   1      #ifdef SILABS_MCU_F960
                SEGMENT_VARIABLE(bRestoreSfrPage, U8, SEG_DATA);
              
                bRestoreSfrPage = SFRPAGE;
                SFRPAGE = LEGACY_PAGE;
              #endif //#ifdef SILABS_MCU_F960
 232   1      
 233   1        if( (TMR3CN & M_TF3H) == 0)
 234   1        {
 235   2          return 0;
 236   2        }
C51 COMPILER V9.51   TIMER                                                                 04/26/2015 18:55:46 PAGE 5   

 237   1        else
 238   1        {
 239   2          mTmr_StopTmr3();
 240   2          return 1;
 241   2        }
 242   1      
 243   1      #ifdef SILABS_MCU_F960
                // Restore SFR page after SPI transfer
                SFRPAGE = bRestoreSfrPage;
              #endif //#ifdef SILABS_MCU_F960
 247   1      }
 248          
 249          #endif //#ifdef TIMER_DRIVER_EXTENDED_SUPPORT
 250          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    168    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
